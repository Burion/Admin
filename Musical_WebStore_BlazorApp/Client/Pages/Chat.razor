@page "/chats/{Index}"
@inject HttpClient client
@using Admin.ViewModels
@using System.Linq
@using Admin.ResultModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime jsRuntime;
@inject IModalService Modal
<div class="row">   
    <div class="col-xl-4 col-lg-5">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Your chats</h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-boarded table-hover" >
                        <tbody>
                            @if(nonConfirmedChats == null)
                            {
                                <text>There's no unconfirmed chats</text>
                            }
                            else
                            {
                                foreach(var chat in nonConfirmedChats)
                                {

                                    <div class="row bg-warning">
                                        <div class="col">
                                            <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">  
                                        </div>
                                        <div class="col">
                                            <p>@chat.Company.Name</p>
                                        </div>
                                        <div class="col">
                                            <button @onclick="@(() => JoinChat(@chat.Id))" class="btn btn-danger">Join chat</button>
                                        </div>
                                        
                                    </div>
                                }
                            }
                                

                        @if(chats == null)
                        {
                            <text>Loading...</text>
                        }
                        else
                        {
                            @foreach(var chat in chats)
                            {
                                <tr @onclick="@(()=> SelectChat(@chat.Id))">
                                    <td>
                                        <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">
                                    </td>
                                    <td>
                                        
                                        @if(messages == null)
                                        {
                                            <text>Loading...</text>
                                        }
                                        else
                                        {
                                            if(@messages.Where(m => m.ChatId == chat.Id).Count() > 0)
                                            {
                                            <p style="text-align: left; font-weight: bold;">@chat.Name</p>
                                            <p style="text-overflow: ellipsis;
                                            white-space: nowrap;
                                            overflow: hidden;
                                            width:50%; text-align: left;">@messages.Where(m => m.ChatId == chat.Id).Last().Text</p>
                                            }
                                        }
                                    </td>
                                </tr>
                                }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        @if(ChatId != 0)
                        {
                            <i @onclick="@(() => ShowMembersModal())" class="fas fa-user-friends"></i>
                            <div>
                                <h6  class="m-0 font-weight-bold text-primary">@chats.Single(c => c.Id == ChatId).Service.Name</h6>
                            </div>
                            if(user != null)
                            {

                                if(user.IsInRole("CompanyOperator"))
                                {
                                    
                                    <div>
                                        <button class="btn btn-primary" @onclick="@(() => ShowModal())">Make order</button>
                                    </div>
                                }
                            }
                        }

                    </div>
                    <div class="card-body">
                        @if(shownmessages == null)
                        {
                            <text>Select chat to start conversation.</text>
                        }
                        else
                        {
                        <div class="messages">
                                <ul>
                                        @foreach(var mes in shownmessages)
                                        {   
                                            string mesclass = "";
                                            if(mes.User != null)
                                            {

                                                mesclass = mes.User.Email == email ? "sent" : "replies";
                                                <li class="@mesclass">
                                                    <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">               
                                                    <p>@mes.Text</p>
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="notification">
                                                    <p>
                                                        @mes.Text
                                                    </p>
                                                </li>
                                            }
                                        }

                                        
                                        
                                    </ul>
                                    <EditForm Model="@addMessageModel" OnValidSubmit="@SendMessage">
                                        <InputText @bind-Value="addMessageModel.Text" type="text" class="form-control bg-gray border-1" placeholder="Write your message..." aria-label="Search" aria-describedby="basic-addon2"/>
                                        <i class="fa fa-paperclip attachment" aria-hidden="true"></i>
                                        <button class="submit">Send</button>
                                    </EditForm>
                                </div>
                            }
                                </div>
                                
                        </div>
                        
    </div>
</div>






@code
{
    [Parameter]
    public string Index {get;set;}
    public int ChatId {get;set;}
    public ChatModel[] chats = null;
    public MessageModel[] messages = null;
    public MessageModel[] shownmessages = null;
    public AddMessageModel addMessageModel = new AddMessageModel();
    public ChatModel[] nonConfirmedChats = null;
    string email = "";
    int DeleteId = 0;
    System.Security.Claims.ClaimsPrincipal user = null;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        email = user.Identity.Name;
        chats = await client.GetJsonAsync<ChatModel[]>("api/chats/getchats/" + email);
        messages = await client.GetJsonAsync<MessageModel[]>("api/chats/getmessages");
        shownmessages = null;
        if(user.IsInRole("ServiceOperator"))
        {
            await GetChatsForService();
        }
    }

    void SelectChat(int chatId)
    {
        shownmessages = messages.Where(m => m.ChatId == chatId).ToArray();
        ChatId = chatId;
        this.StateHasChanged();
    }
    protected async Task SendMessage()
    {
        addMessageModel.ChatId = ChatId;
        var result = await client.PostJsonAsync<AddMessageResult>("api/chats/addmessage", addMessageModel);
        await RefreshMessages();
        this.StateHasChanged();
    }

    private async Task RefreshMessages()
    {
        messages = await client.GetJsonAsync<MessageModel[]>("api/chats/getmessages");
        SelectChat(ChatId);
    }
    async Task GetChatsForService()
    {
        nonConfirmedChats = await client.GetJsonAsync<ChatModel[]>("api/chats/getchatsforservice/");
    }
    private void ShowModal()
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add("ServiceId", chats.Single(c => c.Id == ChatId).Service.Id);
        Modal.Show<Modal>("Making Order", parameters);
    }
    async void JoinChat(int chatId)
    {
        var joinChatModel = new JoinChatModel() {ChatId = chatId};
        var res = await client.PostJsonAsync<Result>("api/chats/joinchat", joinChatModel);
        GetChatsForService();
        this.StateHasChanged();
    }
    async Task ShowMembersModal()
    {
        ModalParameters parameters = new ModalParameters();
        parameters.Add("ChatId", ChatId);
        Modal.Show<ChatUsers>("Members", parameters);
    }
}